<?php
require_once '../config/database.php';
require_once '../core/logger.php';

// CRITICAL: Ensure only an admin can perform this destructive action.
check_admin();

// Check if a file was uploaded
if (!isset($_FILES['backup_file']) || $_FILES['backup_file']['error'] !== UPLOAD_ERR_OK) {
    http_response_code(400);
    echo json_encode(['status' => 'error', 'message' => 'No file uploaded or an upload error occurred.']);
    exit();
}

$file_tmp_path = $_FILES['backup_file']['tmp_name'];
$file_name = $_FILES['backup_file']['name'];
$file_extension = strtolower(pathinfo($file_name, PATHINFO_EXTENSION));

// Basic security check: ensure it's an SQL file
if ($file_extension !== 'sql') {
    http_response_code(400);
    echo json_encode(['status' => 'error', 'message' => 'Invalid file type. Please upload a .sql file.']);
    exit();
}

// Read the entire SQL file content
$sql_script = file_get_contents($file_tmp_path);

if ($sql_script === false) {
    http_response_code(500);
    echo json_encode(['status' => 'error', 'message' => 'Could not read the uploaded file.']);
    exit();
}

try {
    // We use exec() because it can handle multiple SQL statements in one string.
    // NOTE: This assumes the backup file is from a trusted source (i.e., generated by our own backup script).
    // Running arbitrary SQL files from the internet is extremely dangerous.
    $pdo->exec($sql_script);
    log_action($pdo, 'DATABASE_RESTORE', "Database restored from file: '{$file_name}'. This is a high-impact event."); // <-- ADD THIS
    echo json_encode(['status' => 'success', 'message' => 'Database restored successfully.']);

} catch (PDOException $e) {
    http_response_code(500);
    echo json_encode(['status' => 'error', 'message' => 'Database restore failed: ' . $e->getMessage()]);
}